<?php
/**
 * @file
 * Code for the MCRC Publications feature.
 */

/**
 * Features include
 */
include_once 'mcrc_publications.features.inc';

/**
 * Implements hook_file_download().
 */
function mcrc_publications_file_download($uri) {
  $ret = NULL;

  $query = db_select('file_usage', 'fu');
  $query->addField('fu', 'id');
  $query->join('file_managed', 'fm', 'fm.fid = fu.fid');
  $query->condition('fm.uri', $uri, '=');
  $query->condition('fu.type', 'node', '=');
  $result = $query->execute();

  foreach ($result as $row) {

    $node_wrapper = entity_metadata_wrapper('node', node_load($row->id));
    if ($node_wrapper->type->value() == 'publication') {
      if (user_access('access all publications') || user_access(mcrc_publications_get_permission_by_tid($node_wrapper->field_publication_type->raw()))) {
        $ret = array('Content-Type' => file_get_mimetype($uri));
      }
      else {
        $ret = -1;
      }
      break;
    }
  }

  return $ret;
}

/**
 * Implements hook_permission().
 */
function mcrc_publications_permission() {
  $ret = array();

  $ret['access all publications'] = array(
    'title' => t('Access all publications'),
    'description' => t('Access all publications regardless of type.'),
  );

  $vocab = taxonomy_vocabulary_machine_name_load('publications');
  $terms = taxonomy_get_tree($vocab->vid, 0, 1);
  foreach ($terms as $term) {
    $ret[mcrc_publications_get_permission_by_tid($term->tid)] = array(
      'title' => mcrc_publications_get_permission_by_tid($term->tid, TRUE),
    );
  }

  return $ret;
}

/**
 * Given a tid, load the permission for it.
 */
function mcrc_publications_get_permission_by_tid($term, $label = FALSE) {

  if (!is_object($term)) {
    $term = taxonomy_term_load($term);
  }

  $parents = taxonomy_get_parents_all($term->tid);
  $term = array_pop($parents);

  $title = 'Access ' . check_plain($term->name) . ' publication type';

  return $label ? $title : strtolower($title);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mcrc_publications_form_publication_node_form_alter(&$form, $form_state) {

  if (module_exists('auto_nodetitle') && (auto_nodetitle_get_setting($form['#node']->type) == AUTO_NODETITLE_OPTIONAL)) {
    // Alter the form to include a JS reveal for the optional title.
    $form['auto_title_choice'] = array(
      '#type' => 'checkbox',
      '#title' => t('Auto-generate a title for this publication.'),
      '#default_value' => TRUE,
      '#weight' => -100,
    );
    $form['title']['#states'] = array(
      'visible' => array(
        ':input[name="auto_title_choice"]' => array('checked' => FALSE),
      ),
    );
    $form['title']['#description'] = t('Enter a title for this publication.  Leave the field blank to auto-generate.');
  }
}
