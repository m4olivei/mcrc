<?php

/**
 * @file
 * Main file for the Bible Field module
 */

// Used for default range in chapters and verses
define('BIBLE_FIELD_DEFAULT_COUNT', 200);

/**
 * Implements hook_field_info().
 */
function bible_field_field_info() {
  return array(
    'bible_field' => array(
      'label' => t('Bible reference'),
      'description' => t('Stores biblical references'),
      'default_widget' => 'bible_field_default',
      'default_formatter' => 'bible_field_default',
      'module' => 'bible_field',
      'settings' => array(
        'version' => '',
        'alphabetical' => 0,
      ),
    )
  );
}

/**
 * Implements hook_field_settings_form().
 */
function bible_field_field_settings_form($field, $instance, $has_data) {  
  $form['version'] = array(
    '#type' => 'select',
    '#options' => bible_field_bible_options(),
    '#title' => t('Bible version'),
    '#default_value' => isset($field['settings']['version']) ? $field['settings']['version'] : '',
    '#weight' => 1,
  );
  $form['alphabetical'] = array(
    '#type' => 'checkbox',
    '#title' => t('Sort books alphabetically'),
    '#default_value' => isset($field['settings']['alphabetical']) ? $field['settings']['alphabetical'] : 0,
    '#weight' => 1,
  );
  return $form;
}
 
/**
 * Implements hook_field_validate()
 */
function bible_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if ($item['chapter_start'] == 0 && $item['chapter_end'] != 0) { // Ending chapter set, but not start
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'bible_field_reference_invalid',
        'message' => t('You set an ending chapter but not a beginning one.'),
      );
    }
    if ($item['verse_start'] == 0 && $item['verse_end'] != 0) { // Ending verse set, but not start
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'bible_field_reference_invalid',
        'message' => t('You set an ending verse but not a beginning one.'),
      );
    }
    if ($item['verse_start'] != '0' && $item['chapter_start'] == '0') { // Verse is set but not chapter
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'bible_field_reference_invalid',
        'message' => t('You have selected a starting verse but not a chapter'),
      );
    }
    if ($item['verse_end'] != '0' && $item['chapter_end'] == '0') { // Verse is set but not chapter
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'bible_field_reference_invalid',
        'message' => t('You have selected a ending verse but not a chapter'),
      );
    }
  }
}

/**
 * Implements hook_field_widget_error().
 */
function bible_field_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'bible_field_reference_invalid':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * Implements hook_field_presave().
 */
function bible_field_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $delta => $item) {
    // Sort out end points
    if ($item['chapter_end'] < $item['chapter_start']) {
      $item['chapter_end'] = $item['chapter_start'];
    }
    
    if ($item['chapter_end'] == $item['chapter_start'] && $item['verse_end'] < $item['verse_start']) {
      $item['verse_end'] = $item['verse_start'];
    }
    
    // Generate weights
    $book = bible_field_load_book($item['book_id']);
    $item['book_name'] = $book['name'];
    $item['book_label'] = $book['label'];
    $book_weight = str_pad($book['section_weight'], 3, '0', STR_PAD_LEFT) . str_pad($book['weight'], 3, '0', STR_PAD_LEFT);
    $item['reference_start_weight'] = (int) $book_weight . str_pad($item['chapter_start'], 3, '0', STR_PAD_LEFT) . str_pad($item['verse_start'], 3, '0', STR_PAD_LEFT);
    $item['reference_end_weight'] = (int) $book_weight . str_pad($item['chapter_end'], 3, '0', STR_PAD_LEFT) . str_pad($item['verse_end'], 3, '0', STR_PAD_LEFT);
    
    $items[$delta] = $item;
  } 
}

/**
 * Implements hook_field_is_empty().
 */
function bible_field_field_is_empty($item, $field) {
  if (empty($item['book_id'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_field_widget_info().
 */
function bible_field_field_widget_info() {
  return array(
    'bible_field_default' => array(
      'label' => t('Default bible field'),
      'field types' => array('bible_field'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function bible_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]) ? $items[$delta] : array();
  
  switch ($instance['widget']['type']) {
    case 'bible_field_default':
      $wrapper_id = drupal_html_id($instance['field_name'] . '-' . $langcode . '-' . $delta . '-wrapper');
      $element += array(
        '#type' => 'container',
        '#title' => t('Bible Passage'),
        '#tree' => TRUE,
        '#attributes' => array('class' => array('biblefield-field-wrapper')),
        '#attached' => array(
          'js' => array(drupal_get_path('module', 'bible_field') . '/bible_field.js'),
          'css' => array(drupal_get_path('module', 'bible_field') . '/bible_field.css'),
        ),
        '#prefix' => '<div id="' . $wrapper_id . '">',
        '#suffix' => '</div>',
      );
         
      $chapter_array = array('0' => t('Chapter')) + array_combine(range(1, BIBLE_FIELD_DEFAULT_COUNT), range(1, BIBLE_FIELD_DEFAULT_COUNT));
      $verse_array = array('0' => t('Verse')) + array_combine(range(1, BIBLE_FIELD_DEFAULT_COUNT), range(1, BIBLE_FIELD_DEFAULT_COUNT));
      
      // Get the version ID
      if (isset($form_state['values'][$instance['field_name']][$langcode][$delta]['bible_id'])) {
        $bible_id = $form_state['values'][$instance['field_name']][$langcode][$delta]['bible_id'];
      }
      else if (isset($value['book_id'])) {
        // The field doesn't store the bible_id, so glean it from the book_id
        $bible_id = db_query('SELECT bible_id FROM {bible_field_book} WHERE book_id = :book_id', array(':book_id' => $value['book_id']))->fetchField();
      }

      // Still nothing?  Look for the default.
      if (empty($bible_id) && isset($field['settings']['version'])) {
        $bible_id = $field['settings']['version'];
      }
      else if (empty($bible_id)) {
        $bible_id = '';
      }
      
      $form_state['books_id_return'] = array($instance['field_name'], $langcode, $delta, 'book_id');
      
      $element['bible_id'] = array(
        '#type' => 'select',
        '#default_value' => $bible_id,
        '#options' => bible_field_bible_options(array(), array('display' => 'abbreviation')),
        '#attributes' => array( 'class' => array('biblefield-select') ),
        '#weight' => 1,
        '#tree' => true,
        '#ajax' => array(
          'wrapper' => $wrapper_id,
          'callback' => 'bible_field_ajax_get_book_select',
        ),
      );
      
      // Work out which books we're going to load
      $book_load_vars = array();
      $book_load_opts = array(
        'display bible headers' => FALSE, 
        'display section headers' => TRUE,
      );
      
      $book_load_vars['bibles'] = array(
        '1' => array(
          'bible_id' => $bible_id,
        ),
      );
      $book_load_opts['filter by'] = array('bible');

      $element['book_id'] = array(
        '#type' => 'select',
        '#default_value' => isset($value['book_id']) ? $value['book_id'] : '',
        '#options' => array_merge(array(0 => t('Book')), bible_field_book_options($book_load_vars, $book_load_opts)),
        '#attributes' => array('class' => array('biblefield-book-input', 'biblefield-select')),
        '#weight' => 2,
        '#tree' => TRUE,
      );
      $element['from'] = array(
        '#markup' => '<div class="form-item">&nbsp;from&nbsp;</div>',
        '#weight' => 3,
      );
      $element['chapter_start'] = array(
        '#type' => 'select',
        '#default_value' => isset($value['chapter_start']) ? $value['chapter_start'] : '',
        '#options' => $chapter_array,
        '#attributes' => array('class' => array('biblefield-chapter-start-input', 'biblefield-select')),
        '#weight' => 4,
        '#tree' => TRUE,
      );
      $element['verse_start'] = array(
        '#type' => 'select',
        '#default_value' => isset($value['verse_start']) ? $value['verse_start'] : '',
        '#attributes' => array('class' => array('biblefield-verse-start-input', 'biblefield-select')),
        '#options' => $verse_array,
        '#weight' => 5,
        '#tree' => TRUE,
      );
      $element['to'] = array(
        '#markup' => '<div class="form-item">&nbsp;to&nbsp;</div>',
        '#weight' => 6,
      );
      $element['chapter_end'] = array(
        '#type' => 'select',
        '#default_value' => isset($value['chapter_end']) ? $value['chapter_end'] : '',
        '#attributes' => array('class' => array('biblefield-chapter-end-input', 'biblefield-select')),
        '#options' => $chapter_array,
        '#weight' => 7,
        '#tree' => TRUE,
      );
      $element['verse_end'] = array(
        '#type' => 'select',
        '#default_value' => isset($value['verse_end']) ? $value['verse_end'] : '',
        '#attributes' => array('class' => array('biblefield-verse-end-input', 'biblefield-select')),
        '#options' => $verse_array,
        '#weight' => 8,
        '#tree' => TRUE,
      );
      break;
  } 

  return $element;
}

/**
 * FAPI #ajax callback for the bible_id select.  This will reload the book select list
 * according to the new seleection.
 */
function bible_field_ajax_get_book_select($form, $form_state) {
  $parents = $form_state['triggering_element']['#parents'];
  $ret = $form[$parents[0]][$parents[1]][$parents[2]];
  if (isset($ret['_weight'])) {
    unset($ret['_weight']);
  }
  return $ret;
}

/**
 * Implements hook_field_formatter_info().
 *
 * Returns information about available field formatters.
 */
function bible_field_field_formatter_info() {

  return array(
    'bible_field_default' => array(
      'label' => t('Default'),
      'field types' => array('bible_field'),
      'settings' => array(
        'show_text' => TRUE,
        'inline' => FALSE,
        'bible_gateway' => TRUE,
        'grouped' => FALSE,
      ),
    ),
    'bible_field_format' => array(
      'label' => t('Custom format'),
      'field types' => array('bible_field'),
      'settings' => array(
        'format' => '[natural] [bible_gateway_link]',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function bible_field_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  switch ($display['type']) {
    // Default field settings
    case 'bible_field_default':
      $element['show_text'] = array(
        '#type' => 'checkbox',
        '#title' => t('Show the text\'s name.'),
        '#description' => t('When this is checked you\'ll get references like <em>John 3:16 (KJV)</em>.  Otherwise you\'ll get references like <em>John 3:16</em>.'),
        '#default_value' => $settings['show_text'],
      );
      $element['bible_gateway'] = array(
        '#type' => 'checkbox',
        '#title' => t('Show a link to the passage on Bible Gateway.'),
        '#default_value' => $settings['bible_gateway'],
      );
      $element['inline'] = array(
        '#type' => 'checkbox',
        '#title' => t('Display as a comma separated list.'),
        '#default_value' => $settings['inline'],
      );
      $element['grouped'] = array(
        '#type' => 'checkbox',
        '#title' => t('Grouped by book'),
        '#default_value' => $settings['grouped'],
        '#description' => t('When this is checked you\'ll get references like <em>John 3:16-19, 4:10</em>.  Otherwise you\'ll get references like <em>John 3:16-19, John 4:10</em>.</em>')
      );
      break;
    case 'bible_field_format':
      $element['format'] = array(
        '#title' => t('Format'),
        '#type' => 'textfield',
        '#required' => TRUE,
        '#default_value' => $settings['format'],
        '#description' => t('Available tokens:') . bible_field_get_token_help(),
      );
      break;
  }

  return $element;
}

/**
 * Helper function to get token help.
 */
function bible_field_get_token_help() {
  $items = array();
  $items[] = '[book:name]';
  $items[] = '[book:label]';
  $items[] = '[book:abbreviation]';
  
  $items[] = '[chapter_start]';
  $items[] = '[chapter_end]';
  $items[] = '[verse_start]';
  $items[] = '[verse_end]';

  $items[] = '[bible_gateway_link]';

  return theme('item_list', array('type' => 'ul', 'items' => $items));
}

/**
 * Implements hook_field_formatter_settings_summary
 */
function bible_field_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  switch ($display['type']) {
    // Default field summary
    case 'bible_field_default':
      if (!empty($settings['show_text'])) {
        $summary[] = t('Show text');
      }
      else {
        $summary[] = t('Hide text');
      }
      if (!empty($settings['inline'])) {
        $summary[] = t('Display as a comma separated list.');
      }
      else {
        $summary[] = t('Display as a list.');
      }
      if (!empty($settings['bible_gateway'])) {
        $summary[] = t('Show link to bible gateway');
      }
      else {
        $summary[] = t('Hide link to bible gateway');
      }
      if (!empty($settings['grouped'])) {
        $summary[] = t('Group by book');
      }
      else {
        $summary[] = t('Don\'t group by book');
      }
      break;
    case 'bible_field_format':
      $summary[] = t('Format: %format', array('%format' => $settings['format']));
      break;
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function bible_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  // First collect the items in a list accoding to the relevant settings, then do any list based theming
  $references = array();
  if ($display['type'] == 'bible_field_format') {
    foreach ($items as $delta => $item) {
      // Get book info
      $book = bible_field_load_book($item['book_id']);
      // Get more straightforward chapter and verse info
      $chapter_start = $item['chapter_start'];
      $chapter_end = $item['chapter_end'];
      $verse_start = $item['verse_start'];
      $verse_end = $item['verse_end'];

      // Get chapters reference for use with bible gateway link.
      $chapters = bible_field_get_chapters($chapter_start, $verse_start, $chapter_end, $verse_end);
      
      $search = array(
        '[book:name]',
        '[book:label]',
        '[book:abbreviation]',
        '[chapter_start]',
        '[chapter_end]',
        '[verse_start]',
        '[verse_end]',
        '[bible_gateway_link]',
        '[natural]',
      );
      $replace = array(
        $book['name'],
        $book['label'],
        $book['abbreviation'],
        $chapter_start,
        $chapter_end,
        $verse_start,
        $verse_end,
        l(t('Read...'), 'http://www.biblegateway.com/bible?version=' . $book['bible_abbreviation'] . '&passage=' . $book['label'] . '+' . $chapters),
      );
      $references[$delta] = str_replace($search, $replace, $settings['format']);
    }
  }
  else {

    foreach ($items as $delta => $item) {
      // Get book info
      $book = bible_field_load_book($item['book_id']);
      // Get more straightforward chapter and verse info
      $chapter_start = $item['chapter_start'];
      $chapter_end = $item['chapter_end'];
      $verse_start = $item['verse_start'];
      $verse_end = $item['verse_end'];

      $chapters = bible_field_get_chapters($chapter_start, $verse_start, $chapter_end, $verse_end);

      if ($settings['grouped']) {
        $references[$item['book_id']][] = $chapters;
      }
      else {
        $link = l(t('Read...'), 'http://www.biblegateway.com/bible?version=' . $book['bible_abbreviation'] . '&passage=' . $book['label'] . '+' . $chapters, array('attributes' => array('target' => '_blank')));
        $references[$delta] = $book['label'] . ' ' . $chapters . (empty($settings['show_text']) ? '' : ' (' . $book['bible_abbreviation'] . ')') . (empty($settings['bible_gateway']) ? '' : ' ' . $link);
      }
    }

    if ($settings['grouped']) {
      // Replace each item in $references with the string that includes the book name
      foreach ($references as $book_id => $chapters) {
        $book = bible_field_load_book($book_id);
        $link = l(t('Read...'), 'http://www.biblegateway.com/bible?version=' . $book['bible_abbreviation'] . '&passage=' . $book['label'] . '+' . implode(', ', $chapters), array('attributes' => array('target' => '_blank')));
        $references[$book_id] = $book['label'] . ' ' . implode(', ', $chapters) . (empty($settings['show_text']) ? '' : ' (' . $book['bible_abbreviation'] . ')'). (empty($settings['bible_gateway']) ? '' : ' ' . $link);
      }
    }
  }

  if (isset($settings['inline']) && $settings['inline']) {
    $element[0] = array(
      '#markup' => implode(', ', $references),
    );
  }
  else {
    foreach ($references as $delta => $reference) {
      $element[$delta] = array('#markup' => $reference);
    }
  }

  return $element;
}

/**
 * Return the chapter syntax for a given reference.
 *
 * @param int $chapter_start
 * @param int $verse_start
 * @param int $chapter_end
 * @param int $verse_end
 */
function bible_field_get_chapters($chapter_start, $verse_start = 0, $chapter_end = 0, $verse_end = 0) {

  // One chapter and one verse
  if ($chapter_end == 0) {
    $chapters = $chapter_start;
    if ($verse_start != 0) {
      $chapters .= ':' . $verse_start;
    }
  }
  // One chapter
  else if ($chapter_start == $chapter_end) {
    // One verse
    $chapters = $chapter_start . ':' . $verse_start;
    // Multiple verses
    if ($verse_start != $verse_end) {
      $chapters .= '-' . $verse_end;
    }
  }
  // Multiple chapters
  else {
    $chapters = $chapter_start . ':' . $verse_start . ' - ' . $chapter_end . ':' . $verse_end;
  }

  return $chapters;
}

/**
 * Load bibles from the bible_field_bible table
 */
function bible_field_load_bibles($variables = array(), $options = array()) {
  $query = db_select('bible_field_bible', 'b');
  $query->fields('b');
  
  //filtering by bibles
  if(isset($options['filter by']) && in_array('bible', $options['filter by'])) {
    $bible_ids = array();
    foreach($variables['bibles'] as $bible) {
      $bible_ids[] = $bible['bible_id'];
    }
    $query->condition('bible_id', $bible_ids, 'IN');
  }
  
  $query->orderBy('weight', 'ASC');
  $result = $query->execute();
  
  while($record = $result->fetchAssoc()) {
    $bibles[$record['bible_id']] = $record;
  }  
  
  return $bibles;            
}

/**
 * Load sections for a given bible from bible_field_section
 *
 * @param $variables
 *   An associative array of things to filter by.
 *   - "bibles": an array of bibles
 *   - "sections": an array of sections
 *
 * @param $options
 *   An associative array of options.
 *   - "filter by": an array of filters, bible and/or section and or bookids
 *   - "order by": an array of fields to order by
 *
 * @return
 *   An array of books organised by bible section and book name
 *
 * TODO:
 *  - Add filter by bible
 *  - Add filter by machine names
 */
function bible_field_load_sections($variables = array(), $options = array()) {
  $query = db_select('bible_field_section', 's');
  $query->join('bible_field_bible','b','s.bible_id = b.bible_id');
  
  $query->fields('s');
  $query->fields('b');  
  
  //filtering by sections
  if(isset($options['filter by']) && in_array('section', $options['filter by'])) {
    $section_ids = array();
    foreach($variables['sections'] as $section) {
      $section_ids[] = $section['section_id'];
    }
    $query->condition('s.section_id', $section_ids, 'IN');
  }
  //filtering by bibles
  if(isset($options['filter by']) && in_array('bible', $options['filter by'])) {
    $bible_ids = array();
    foreach($variables['bibles'] as $bible) {
      $bible_ids[] = $bible['bible_id'];
    }
    $query->condition('bible_id', $bible_ids, 'IN');
  }
  
  $query->orderBy('weight', 'ASC');
  $result = $query->execute()->fetchAssoc();
  
  foreach($result as $record) {
    $sections[$record['b.abbreviation']][$record['s.section_id']] = array(
      'name' => $record['name'],
      'label' => t($record['label']),
      'abbreviation' => $record['abbreviation'],
      'available_chapters' => $record['available_chapters'],
    );
  }
  
  return $sections;
}

/**
 * Load a single book
 */
function bible_field_load_book($book_id) {
  $query = db_select('bible_field_book', 'bb');
  $query->join('bible_field_section', 's', 'bb.section_id = s.section_id');
  $query->join('bible_field_bible', 'b', 'bb.bible_id = b.bible_id');
  $query->fields('bb');
  $query->addField('s', 'label', 'section_label');
  $query->addField('s', 'abbreviation', 'section_abbreviation');
  $query->addField('s', 'weight', 'section_weight');  
  $query->addField('b', 'abbreviation', 'bible_abbreviation');
  $query->addField('b', 'label', 'bible_label');
  $query->condition('bb.book_id', $book_id, '=');
  $result = $query->execute();
  return $result->fetchAssoc();
}
/**
 * Load books for a given section from bible_field_book
 *
 * @param $variables
 *   An associative array of things to filter by.
 *   - "bibles": an array of bibles
 *   - "sections": an array of sections
 *   - "books": an array of books
 *
 * @param $options
 *   An associative array of options.
 *   - "filter by": an array of filters, bible and/or section and or bookids
 *   - "order by": an array of fields to order by
 *
 * @return
 *   An array of books organised by bible section and book name
 *
 * TODO:
 *  - Add filter by machine names
 */
function bible_field_load_books($variables = array(), $options = array()) {
  
  $query = db_select('bible_field_book', 'bb');
  $query->join('bible_field_section', 's', 'bb.section_id = s.section_id');
  $query->join('bible_field_bible', 'b', 'bb.bible_id = b.bible_id');
  $query->fields('bb');
  $query->addField('s', 'label', 'section_label');
  $query->addField('b', 'abbreviation', 'bible_abbreviation');
  
  //filtering by books
  if(isset($options['filter by']) && in_array('book', $options['filter by'])) {
    $book_ids = array();
    foreach($variables['books'] as $book) {
      $book_ids[] = $book['book_id'];
    }
    $query->condition('bb.book_id', $book_ids, 'IN');
  }
  //filtering by sections
  if(isset($options['filter by']) && in_array('section', $options['filter by'])) {
    $section_ids = array();
    foreach($variables['sections'] as $section) {
      $section_ids[] = $section['section_id'];
    }
    $query->condition('bb.section_id', $section_ids, 'IN');
  }
  //filtering by bibles
  if(isset($options['filter by']) && in_array('bible', $options['filter by'])) {
    $bible_ids = array();
    foreach($variables['bibles'] as $bible) {
      $bible_ids[] = $bible['bible_id'];
    }
    $query->condition('bb.bible_id', $bible_ids, 'IN');
  }
  $query->orderBy('s.weight','ASC');
  $query->orderBy('bb.weight', 'ASC');
  
  $result = $query->execute();
  
  $books = array();
  while($record = $result->fetchAssoc()) {
    $books[$record['bible_abbreviation']][$record['section_label']][$record['book_id']] = array(
      'name' => $record['name'],
      'label' => t($record['label']),
      'abbreviation' => $record['abbreviation'],
      'available_chapters' => $record['available_chapters'],
    );
  }

  return $books;
}

/**
 * Grab a list of books for a select input
 *
 * @param $variables
 *   An associative array of things to filter by.
 *   - "bibles": an array of bibles
 *   - "sections": an array of sections
 *   - "books": an array of books
 *
 * @param $options
 *   An associative array of options.
 *   - "filter by": an array of filters, bible and/or section and or bookids
 *   - "order by": an array of fields to order by
 *   - "display": what to display as the options text, defaults to label.
 *   - "value": What value should the options have. "machine_name" for the machine name, or blank for the id.
 */
function bible_field_book_options($variables = array(), $options = array()) {
  $bible = bible_field_load_books($variables, $options);
  
  if(!isset($options['display']) || !in_array($options['display'], array('label', 'abbreviation', 'name'))) {
    $options['display'] = 'label';
  }
  
  $select_options = array();
  foreach($bible as $bible_abbreviation => $sections) {
    foreach($sections as $section_abbreviation => $books) {
      foreach($books as $book_id => $book) {
        //This was mainly for views integration, but has the added benefit of getting rid of duplicates if we're not grouping the books
        if(isset($options['value']) && $options['value'] == 'machine_name') {
          $book_id = $book['name'];
        }
        
        if(isset($options['display bible headers']) && $options['display bible headers']) {
          if(isset($options['display section headers']) && $options['display section headers']) {
            $select_options[$bible_abbreviation][$section_abbreviation]["$book_id"] = $book[$options['display']]; 
          }
          else {
            $select_options[$bible_abbreviation]["$book_id"] = $book[$options['display']]; 
          }          
        }
        else if(isset($options['display section headers']) && $options['display section headers']) {
          $select_options[$section_abbreviation]["$book_id"] = $book[$options['display']]; 
        }
        else {      
          $select_options["$book_id"] = $book[$options['display']];
        }
      }
    }
  }  
  
  return $select_options;
}

/**
 * Grab a list of sections for a select input
 */
function bible_field_section_options($variables = array(), $options = array()) {
  $bible = bible_field_load_sections($variables, $options);
  
  if(!isset($options['display']) || !in_array($options['display'], array('label', 'abbreviation', 'name'))) {
    $options['display'] = 'label';
  }
  
  $select_options = array();
  foreach($bible as $bible_id => $sections) {
    foreach($sections as $section_id => $books) {
        $select_options[$section_id] = $section[$options['display']];
    }
  }  
  
  return $select_options;
}


/**
 * Grab a list of bibles for a select input
 */
function bible_field_bible_options($variables = array(), $options = array()) {
  $bibles = bible_field_load_bibles($variables, $options);
  
  if(!isset($options['display']) || !in_array($options['display'], array('label', 'abbreviation', 'name'))) {
    $options['display'] = 'label';
  }
  
  $select_options = array();
  foreach($bibles as $bible_id => $bible) {
    $select_options["$bible_id"] = $bible[$options['display']];
  }  
  
  return $select_options;
}

/**
 * Implements hook_views_api().
 */
function bible_field_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module','bible_field') . '/includes',
  );
}

/**
 * Implementation of hook_views_handlers() to register all of the basic handlers
 * views uses. TODO
 */
function bible_field_views_handlers() {
  return array(
    'info' => array(
      'path' => drupal_get_path('module', 'bible_field') .'/includes',
    ),
    'handlers' => array(
      'bible_field_handler_filter_start_end' => array(
        'parent' => 'views_handler_filter_numeric',
      ),
      'bible_field_handler_filter_book' => array(
        'parent' => 'views_handler_filter_string',
      ),
      'bible_field_handler_filter_composite' => array(
        'parent' => 'views_handler_filter',
      ),
    ),
  );
}

/**
 * Implements hook_init().
 */
function bible_field_init() {
  // This is added for testing the filter in Views
  // @TODO: Find a way to add this just to Views pages
}

// Installing Bibles
/**
 * Installs a bible from a given array
 *
 * @param $bible 
 *   A large array of information about a particular bible
 *   - "name":
 *   - "label":
 *   - "abbreviation":
 *   - "sections": An associative array of sections
 *    - "name":
 */
function bible_field_install_bible($bible) {
  //insert bible
  $bible_id = db_insert('bible_field_bible')
    ->fields(array(
      'name' => $bible['name'],
      'label' => $bible['label'],
      'abbreviation' => $bible['abbreviation'],
      'weight' => $bible['weight'],
    ))
    ->execute();
  
  foreach($bible['sections'] as $section_name => $section) {
    $section_id = db_insert('bible_field_section')
      ->fields(array(
        'name' => $section_name,
        'label' => $section['label'],
        'abbreviation' => $section['abbreviation'],
        'weight' => $section['weight'],
        'bible_id' => $bible_id,
      ))
      ->execute();
    
    foreach($section['books'] as $book_name => $book) {
      $book_id = db_insert('bible_field_book')
      ->fields(array(
        'name' => $book_name,
        'label' => $book['label'],
        'abbreviation' => $book['abbreviation'],
        'weight' => $book['weight'],
        'available_chapters' => $book['available_chapters'],
        'bible_id' => $bible_id,
        'section_id' => $section_id,
      ))
      ->execute();
    }
  }
  
  drupal_set_message($bible['label'] ." successfully installed.");
}
